import React, { Component } from "react";
import styled from "styled-components";
import shortid from "shortid";

import Button from "@material-ui/core/Button";
import { withStyles } from "@material-ui/core/styles";
import SelectComponent from "../common/selectDropDown/SelectComponent";
import {
  validateField,
  validateForm,
  findParent,
  validateOnBlur
} from "../../common/utils/utils";
import FormTextField from "../common/forms/FormTextField";
import theme from "../../common/styled/theme";

// TODO: Move logic and state into a container function

class ContactFormComponent extends Component {
  state = {
    firstname: {
      value: "",
      type: "text"
    },
    lastname: {
      value: "",
      type: "text"
    },
    email: {
      value: "",
      type: "email"
    },
    reason: {
      value: "",
      type: "text"
    },
    formIsValid: false,
    modalOpen: false
  };

  componentDidMount() {
    this.addFormListeners();
  }
  addFormListeners = () => {
    var form = document.querySelector("form");
    form.addEventListener("focusin", this.onFormFocusIn);
    form.addEventListener("focusout", this.onFormFocusOut);
  };

  onFormFocusIn = ev => {
    this.setRowFocus();
    validateOnBlur(ev);
  };

  onFormFocusOut = ev => {
    this.setRowFocus();
    validateOnBlur(ev);
  };

  // findParent takes a callback to verify the type of parent, in this case it has to have the "form-item" class
  setRowFocus = () => {
    var activeEl = document.activeElement;
    var activeElRow = findParent(activeEl, this.isFormRow);
    var rows = [].slice.call(document.querySelectorAll(".form-item"));

    rows.forEach(function(row) {
      if (row === activeElRow) {
        row.classList.add("has-focus");
      } else {
        row.classList.remove("has-focus");
      }
    });
  };

  isFormRow = el => {
    return el.classList.contains("form-item");
  };

  handleChange = ev => {
    console.log(`${ev.target.name} : ${ev.target.value}`);
    this.setState({
      [ev.target.name]: {
        value: ev.target.value
      }
    });
  };

  handleNext = () => {
    this.setState({
      activeStep: this.state.activeStep + 1
    });
  };

  handleBack = () => {
    this.setState(state => ({
      activeStep: state.activeStep - 1
    }));
  };

  handleSubmit = ev => {
    ev.preventDefault();
  };
  handleOpen = ev => {
    console.log(ev.target);
    this.setState({
      modalOpen: true
    });
  };
  handleClose = ev => {
    this.setState({
      modalOpen: false
    });
  };

  render() {
    const {
      formIsValid,
      firstname,
      lastname,
      email,
      reason,
      modalOpen
    } = this.state;
    const { classes } = this.props;

    const contactReasons = [
      {
        label: "Why are you reaching out?",
        disabled: true,
        value: "",
        selected: true
      },
      {
        label: "I have reservation for over 15 people",
        disabled: false,
        value: "reservation",
        selected: false
      },
      {
        label: "I'm representing a charity",
        disabled: false,
        value: "charity",
        selected: false
      },
      {
        label: "I'd like to hold an event at an Industry",
        disabled: false,
        value: "event",
        selected: false
      },
      {
        label: "I'd like to make food selections for my party",
        disabled: false,
        value: "food",
        selected: false
      },
      {
        label: "I have another reason...",
        disabled: false,
        value: "other",
        selected: false
      }
    ];
    const formItems = [
      {
        id: "firstname",
        label: "Your First Name",
        type: "text",
        placeHolder: "Nikola",
        isRequired: true,
        handleChange: this.handleChange
      },
      {
        id: "lastname",
        label: "Your Last Name",
        type: "text",
        placeHolder: "Tesla",
        isRequired: true,
        handleChange: this.handleChange
      },
      {
        id: "email",
        label: "Your Email",
        type: "text",
        placeHolder: "nikola.tesla@example.com",
        isRequired: true,
        handleChange: this.handleChange
      }
    ];
    return (
      <Form onsSubmit={this.handleSubmit} method="post" noValidate>
        <fieldset style={{ border: "none", margin: 0, paddingBottom: 0 }}>
          {/** FORM ITEMS */}
          {formItems.map(item => (
            <FormTextField
              key={shortid.generate()}
              id={item.id}
              label={item.label}
              type={item.type}
              placeHolder={item.placeHolder}
              isRequired={item.isRequired}
              handleChange={item.handleChange}
            />
          ))}

          {/** REASON */}
          <FormRow className="select form-item">
            <Label for="reason">Contact Reason</Label>
            <SelectWrapper>
              <SelectComponent
                modalOpen={modalOpen}
                onClose={this.handleClose}
                onOpen={this.handleOpen}
                handleChange={this.handleChange}
                validate={validateField}
                options={contactReasons}
                currentReason={reason.value}
                name="reason"
                type="text"
              />
            </SelectWrapper>
          </FormRow>
        </fieldset>
        <Button
          disabled={!formIsValid}
          onClick={this.handleSubmit}
          variant="contained"
          classes={{
            disabled: classes.buttonDisabled,
            contained: classes.homeButton
          }}
          style={{
            backgroundColor: theme.colors.yellowGray + "!important"
          }}
        >
          Submit
        </Button>
      </Form>
    );
  }
}

export default withStyles(theme.materialUI)(ContactFormComponent);

const Form = styled.form`
  padding: 10px 10px 13px 15px;
  width: 100%;
  ${props => props.theme.media.tablet_portrait_up`
          padding:10px 18px 20px 24px;
  `};
`;
const FormRow = styled.div`
  padding: 8px 13px 2px 17px;
  transition: opacity 0.2s ease-in, height 0.2s ease-out;

  ${props => props.theme.media.tablet_portrait_up`
    display: flex;
    border-bottom: none;
    padding: 4px 0;
    max-width: 600px;
  `};
  &.has-focus {
    box-shadow: none;
    background-color: ${props => props.theme.colors.whiteTheme};
    color: ${props => props.theme.colors.yellowGray + "!important"};
    ${props => props.theme.media.tablet_portrait_up`
      box-shadow: 0 0 0 1px ${props => props.theme.colors.whiteTheme};
    `};
    > label {
      color: ${props => props.theme.colors.darkTheme};
    }
    > select {
      box-shadow: none;
      background-color: transparent;
      ${props => props.theme.media.tablet_portrait_up`
      box-shadow: 0 0 0 1px ${props => props.theme.colors.whiteTheme};
    `};
    }
  }
`;
const SelectWrapper = styled.div`
  flex: 68%;
  position: relative;
  cursor: pointer;
`;

const Label = styled.label`
  display: block;
  text-transform: uppercase;
  transition: color 0.1s ease-out;

  ${props => props.theme.components.small};
  color: ${props => props.theme.colors.blackTheme};
  font-weight: 600;
  letter-spacing: 0.43px;
  ${props => props.theme.media.tablet_portrait_up`
    ${props => props.theme.components.text};
    color: ${props => props.theme.colors.blackTheme};
    font-weight: 500;
    flex: 32%;
    text-transform: none;
    align-self: center;
    margin-right: 20px;
    text-align: left;
  `};
  &.with-summary {
    align-self: flex-start;
    padding-top: 7px;
  }
`;
